{"componentChunkName":"component---packages-gatsby-theme-kenny-blog-core-src-templates-post-query-tsx","path":"/getting-the-actual-client-ip-address-in-nginx-reverse-proxy","result":{"data":{"post":{"__typename":"MdxPost","id":"a719910b-5077-5a02-a17a-349d66eb3cf5","slug":"/getting-the-actual-client-ip-address-in-nginx-reverse-proxy","title":"Getting the Actual Client IP Address in Nginx Reverse Proxy","date":"18.01.2024","tags":[{"name":"DevOps","slug":"dev-ops"}],"description":"Learn how to retrieve the real client's IP address in Nginx reverse proxy setups. Explore configurations using \"X-Real-IP\" headers and find out the best practices for server-side handling. Additionally, discover the essential difference between Nginx reload and restart commands, ensuring smooth configuration updates without compromising server uptime. Optimize your Nginx setup for improved performance and reliability.","body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Getting the Actual Client IP Address in Nginx Reverse Proxy\",\n  \"date\": \"2024-01-18T00:00:00.000Z\",\n  \"description\": \"Learn how to retrieve the real client's IP address in Nginx reverse proxy setups. Explore configurations using \\\"X-Real-IP\\\" headers and find out the best practices for server-side handling. Additionally, discover the essential difference between Nginx reload and restart commands, ensuring smooth configuration updates without compromising server uptime. Optimize your Nginx setup for improved performance and reliability.\",\n  \"tags\": [\"DevOps\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When using Nginx as a reverse proxy server, obtaining the actual client's IP address can be a bit complex. By default, Nginx records the remote address of requests forwarded through a proxy pass. However, to acquire the real client's IP address, several configurations are necessary.\"), mdx(\"p\", null, \"One approach is to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X-Real-IP\"), \" header to transmit the client's actual IP address. Below is an example implementation in the Nginx configuration file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Copy code\\nserver {\\nlisten 80;\\nserver_name example.com;\\n\\n    location / {\\n        proxy_pass http://your_upstream_server;\\n        proxy_set_header Host $host;\\n        proxy_set_header X-Real-IP $remote_addr;\\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n        proxy_set_header X-Forwarded-Proto $scheme;\\n    }\\n\\n    # ... Other configurations ...\\n}\\n\")), mdx(\"p\", null, \"In this setup, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"proxy_set_header X-Real-IP $remote_addr;\"), \" instructs Nginx to add the client's actual IP address to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X-Real-IP\"), \" header.\"), mdx(\"p\", null, \"Subsequently, on the server side, you can extract the actual client IP using this header. For instance, in a Node.js server:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const express = require('express');\\nconst app = express();\\n\\napp.use((req, res, next) => {\\n  const clientIP = req.headers['x-real-ip'] || req.connection.remoteAddress;\\n  console.log(`Client IP: ${clientIP}`);\\n  next();\\n});\\n\\n// Additional routing and middleware configurations...\\n\\nconst port = 3000;\\napp.listen(port, () => {\\n  console.log(`Server is running on port ${port}`);\\n});\\n\")), mdx(\"p\", null, \"This way, you can retrieve the actual client IP address from requests forwarded through Nginx's reverse proxy server.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bonus Tip: Nginx Reload vs Restart\")), mdx(\"p\", null, \"When restarting Nginx, it's crucial to understand the difference between \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reload\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"restart\"), \". The reload command re-reads the configuration file without stopping the web server, maintaining its current state even if there are issues. Conversely, restart involves stopping and then restarting Nginx, which may lead to downtime if problems arise during the restart process.\"), mdx(\"p\", null, \"Remember to validate the configuration syntax with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nginx -t\"), \" before reloading to ensure a smooth transition.\"), mdx(\"p\", null, \"Now, let's continue exploring and optimizing your Nginx setup for a seamless web-serving experience!\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"When using Nginx as a reverse proxy server, obtaining the actual client's IP address can be a bit complex. By default, Nginx records theâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/getting-the-actual-client-ip-address-in-nginx-reverse-proxy"}},"staticQueryHashes":["1386366609","1386366609","1580740877"]}