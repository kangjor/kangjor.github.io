{"componentChunkName":"component---packages-gatsby-theme-kenny-blog-core-src-templates-post-query-tsx","path":"/obtaining-real-client-ip-in-nginx-reverse-proxy-to-node-js-server","result":{"data":{"post":{"__typename":"MdxPost","id":"52179243-8a80-5081-8bf2-e7388c94865a","slug":"/obtaining-real-client-ip-in-nginx-reverse-proxy-to-node-js-server","title":"Obtaining Real Client IP in Nginx Reverse Proxy to Node.js Server","date":"19.01.2024","tags":[{"name":"DevOps","slug":"dev-ops"},{"name":"Server","slug":"server"}],"description":"Explore the intricacies of obtaining real client IP addresses in an Nginx reverse proxy setup forwarding requests to a Node.js server. Learn how to configure Nginx, understand the relationships between Load Balancers, Reverse Proxies, and Node.js servers, and discover the crucial settings to accurately retrieve the actual client IP address. Enhance your web application's functionality with this comprehensive guide.","body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Obtaining Real Client IP in Nginx Reverse Proxy to Node.js Server\",\n  \"date\": \"2024-01-19T00:00:00.000Z\",\n  \"description\": \"Explore the intricacies of obtaining real client IP addresses in an Nginx reverse proxy setup forwarding requests to a Node.js server. Learn how to configure Nginx, understand the relationships between Load Balancers, Reverse Proxies, and Node.js servers, and discover the crucial settings to accurately retrieve the actual client IP address. Enhance your web application's functionality with this comprehensive guide.\",\n  \"tags\": [\"DevOps\", \"Server\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Hello! Today, let's explore how to obtain the real client IP address in an Nginx reverse proxy setup forwarding requests to a Node.js server. To understand this process, let's first glance at the relationships between the Load Balancer (LB), Nginx reverse proxy, and the Node.js server.\"), mdx(\"h3\", null, \"Scenario Overview\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Load Balancer (LB)\"), \": A device distributing traffic from clients to multiple servers. LB typically has a unique IP address. (e.g., 123.123.123.123)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Nginx Reverse Proxy\"), \": An intermediate server forwarding requests received from the Load Balancer to various servers. This server can encapsulate the client's IP address while sending responses. (e.g., 456.456.456.456)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Node.js Server\"), \": The actual server where the web application operates.\"), mdx(\"h3\", null, \"Nginx Configuration\"), mdx(\"p\", null, \"Now, let's dive into the actual configuration. Add the following settings related to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set_real_ip_from\"), \" in the Nginx configuration file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text,\",\n    \"metastring\": \"{6,7,8}\",\n    \"{6,7,8}\": true\n  }, \"server {\\nlisten 80;\\nserver_name your_domain.com;\\n\\n    # Allowing the IP address of the Load Balancer\\n    set_real_ip_from 123.123.123.123;\\n    real_ip_header X-Forwarded-For;\\n    real_ip_recursive on;\\n\\n    location / {\\n        proxy_pass http://your_node_server;\\n        proxy_set_header Host $host;\\n        proxy_set_header X-Real-IP $remote_addr;\\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n    }\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 6\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set_real_ip_from 123.123.123.123;\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"This configuration informs Nginx that the IP address of the load balancer is a trusted source. By setting this, Nginx only allows requests from this address, ensuring that it trusts it as a reliable source for obtaining the actual client's IP.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"real_ip_header X-Forwarded-For;\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"This setting instructs Nginx to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X-Forwarded-For\"), \" header to identify the real client IP address. This header contains a list of IP addresses sent from the client to the server.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"real_ip_recursive on;\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"This configuration allows Nginx to select the first IP address when there are multiple IP addresses in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X-Forwarded-For\"), \" header. This ensures that the actual client's IP address is trusted.\"))), mdx(\"h3\", null, \"Obtaining Real Client IP\"), mdx(\"p\", null, \"Now, let's see how to retrieve the real client IP in the Node.js server.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const express = require('express');\\nconst app = express();\\n\\napp.use((req, res, next) => {\\n// Obtaining the real client IP\\n  const clientIP = req.headers['x-real-ip'] || req.connection.remoteAddress;\\n  console.log('Client IP:', clientIP);\\n  next();\\n});\\n\\n// Rest of the server logic\\n\")), mdx(\"h3\", null, \"Conclusion\"), mdx(\"p\", null, \"Congratulations! You've successfully configured Nginx reverse proxy to effectively obtain the real client IP address. Thank you! After applying the configuration, remember to reload Nginx or restart it to ensure the changes take effect.\"), mdx(\"p\", null, \"Note that when restarting Nginx, it's advisable to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nginx -t\"), \" (configuration file syntax test) first and then use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reload\"), \" to restart. Unlike \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"restart\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reload\"), \" reads the configuration file again. Even if there are issues, the web server won't shut down, maintaining its current state.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Hello! Today, let's explore how to obtain the real client IP address in an Nginx reverse proxy setup forwarding requests to a Node.js serverâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/obtaining-real-client-ip-in-nginx-reverse-proxy-to-node-js-server"}},"staticQueryHashes":["1386366609","1386366609","1580740877"]}