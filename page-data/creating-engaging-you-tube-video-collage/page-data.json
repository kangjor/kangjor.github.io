{"componentChunkName":"component---packages-gatsby-theme-kenny-blog-core-src-templates-post-query-tsx","path":"/creating-engaging-you-tube-video-collage","result":{"data":{"post":{"__typename":"MdxPost","id":"642f8fa3-3616-55df-b913-c71459d5c78f","slug":"/creating-engaging-you-tube-video-collage","title":"Creating Engaging YouTube Video Collage","date":"11.01.2024","tags":[{"name":"Javascript","slug":"javascript"},{"name":"Programming","slug":"programming"}],"description":"Explore the fascinating world of video collage creation using ffmpeg and Node.js. Learn how to merge and overlay multiple videos in a grid pattern, producing a captivating visual composition. This step-by-step guide covers everything from downloading YouTube videos to crafting intricate filter graphs. Elevate your video editing skills with this immersive tutorial on creating stunning video collages programmatically.","body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Creating Engaging YouTube Video Collage\",\n  \"description\": \"Explore the fascinating world of video collage creation using ffmpeg and Node.js. Learn how to merge and overlay multiple videos in a grid pattern, producing a captivating visual composition. This step-by-step guide covers everything from downloading YouTube videos to crafting intricate filter graphs. Elevate your video editing skills with this immersive tutorial on creating stunning video collages programmatically.\",\n  \"date\": \"2024-01-11T00:00:00.000Z\",\n  \"tags\": [\"Javascript\", \"Programming\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"Merging videos and presenting them in a collage format is an incredibly fascinating endeavor. In this blog post, we'll explore the process of downloading YouTube videos and combining them into a captivating collage using JavaScript and Node.js.\"), mdx(\"h3\", null, \"1. Installing Required Libraries\"), mdx(\"p\", null, \"Start by installing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ytdl-core\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fluent-ffmpeg\"), \" to download and process YouTube videos. Additionally, we'll use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fs\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path\"), \" modules for file and path manipulation.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npm install ytdl-core fluent-ffmpeg\\n\")), mdx(\"h3\", null, \"2. Setting Up Directories\"), mdx(\"p\", null, \"Configure the directories to store downloaded and processed videos.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const input_directory = path.resolve('./input');\\nconst output_directory = path.resolve('./output');\\n\\n// Create directories if they don't exist\\nif (!fs.existsSync(input_directory)) {\\n  fs.mkdirSync(input_directory);\\n}\\nif (!fs.existsSync(output_directory)) {\\n  fs.mkdirSync(output_directory);\\n}\\n\")), mdx(\"h3\", null, \"3. Creating a List of YouTube Video URLs\"), mdx(\"p\", null, \"Compile a list of URLs for YouTube videos to download.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const youtubeVideoURLs = [\\n'https://www.youtube.com/watch?v=G7KNmW9a75Y',\\n'https://www.youtube.com/watch?v=6ZUIwj3FgUY',\\n'https://www.youtube.com/watch?v=ArmDp-zijuc',\\n'https://www.youtube.com/watch?v=XoiOOiuH8iI',\\n];\\n\")), mdx(\"h3\", null, \"4. Writing the Video Download and Processing Function\"), mdx(\"p\", null, \"Utilize \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ytdl-core\"), \" to download YouTube videos and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fluent-ffmpeg\"), \" to combine them into a collage.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"async function downloadAndProcessVideos() {\\n// ... (omitting subsequent code)\\n}\\n\")), mdx(\"p\", null, \"The following is the detailed content of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"downloadAndProcessVideos()\"), \" function\"), mdx(\"h4\", null, \"4-1. YouTube Video Download\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const videoPromises = youtubeVideoURLs.map(async (url, index) => {\\n  const videoInfo = await ytdl.getInfo(url);\\n  const videoStream = await ytdl(url, {filter: 'audioandvideo'})\\n    .pipe(fs.createWriteStream(`${input_directory}/video${index}.mp4`));\\n\\n  return new Promise(resolve => {\\n    videoStream.on('finish', () => {\\n      console.warn('finished');\\n      resolve({videoStream, videoInfo});\\n    });\\n  });\\n});\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Collects information asynchronously for each YouTube video in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"youtubeVideoURLs\"), \" array.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Uses \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ytdl.getInfo(url)\"), \" to retrieve video information.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Filters video and audio using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ytdl(url, { filter: 'audioandvideo' })\"), \" and saves it as a file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Returns a Promise containing video information and stream upon completion.\")), mdx(\"h4\", null, \"4-2. Setting Up ffmpeg and Adding Videos to Collage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const videoInfoArray = await Promise.all(videoPromises);\\nconst ffmpegCommand = Ffmpeg();\\nffmpegCommand.setFfmpegPath(path.resolve('/ffmpeg/bin/ffmpeg.exe'));\\nffmpegCommand.setFfprobePath(path.resolve('/ffmpeg/bin/ffprobe.exe'));\\n\\nvideoInfoArray.forEach(({videoStream}, index) => {\\n  ffmpegCommand.input(videoStream.path);\\n});\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Waits for all video downloads to complete using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Promise.all\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Configures \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ffmpeg\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ffprobe\"), \" path if you have get error.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adds each video stream to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ffmpegCommand.input\"), \".\")), mdx(\"h4\", null, \"4-3. Combining Videos into Collage Format\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const filterGraph = [\\n  `nullsrc=size=640x480 [base];`,\\n  `[0:v] setpts=PTS-STARTPTS, scale=320x240 [upperleft];`,\\n  `[1:v] setpts=PTS-STARTPTS, scale=320x240 [upperright];`,\\n  `[2:v] setpts=PTS-STARTPTS, scale=320x240 [lowerleft];`,\\n  `[3:v] setpts=PTS-STARTPTS, scale=320x240 [lowerright];`,\\n  `[base][upperleft] overlay=shortest=1 [tmp1];`,\\n  `[tmp1][upperright] overlay=shortest=1:x=320 [tmp2];`,\\n  `[tmp2][lowerleft] overlay=shortest=1:y=240 [tmp3];`,\\n  `[tmp3][lowerright] overlay=shortest=1:x=320:y=240 [v];`,\\n  `[0:a][1:a]amerge[a1];`,\\n  `[a1][2:a]amerge[a2];`,\\n  `[a2][3:a]amerge[a]`,\\n].join(' ');\\n\\nffmpegCommand\\n  .complexFilter(filterGraph)\\n  .outputOptions('-map', '[v]')\\n  .outputOptions('-map', '[a]')\\n  .output(`${output_directory}/final.mp4`)\\n  .on('end', () => console.log('Processing finished!'))\\n  .on('error', (err, stdout, stderr) => {\\n    console.error('Error:', err)\\n    console.log('ffmpeg stdout:', stdout);\\n    console.log('ffmpeg stderr:', stderr);\\n  })\\n  .run();\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Constructs a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"filter graph\"), \" to combine videos into a collage. Breaking it down step by step:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"nullsrc=size=640x480 \", \"[base]\", \";: Creates a blank canvas with a size of 640x480 pixels, referred to as base.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[0:v]\", \" setpts=PTS-STARTPTS, scale=320x240 \", \"[upperleft]\", \";: Takes the first video stream (\", \"[0:v]\", \"), adjusts the presentation timestamps, scales it to 320x240 pixels, and labels it as upperleft.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[1:v]\", \" setpts=PTS-STARTPTS, scale=320x240 \", \"[upperright]\", \";: Similar to the previous step, processes the second video stream and labels it as upperright.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[2:v]\", \" setpts=PTS-STARTPTS, scale=320x240 \", \"[lowerleft]\", \";: Processes the third video stream and labels it as lowerleft.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[3:v]\", \" setpts=PTS-STARTPTS, scale=320x240 \", \"[lowerright]\", \";: Processes the fourth video stream and labels it as lowerright.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[base][upperleft]\", \" overlay=shortest=1 \", \"[tmp1]\", \";: Overlays the blank canvas (base) with the upperleft video stream and labels the result as tmp1.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[tmp1][upperright]\", \" overlay=shortest=1:x=320 \", \"[tmp2]\", \";: Further overlays tmp1 with the upperright video stream, offsetting it by 320 pixels horizontally, and labels the result as tmp2.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[tmp2][lowerleft]\", \" overlay=shortest=1:y=240 \", \"[tmp3]\", \";: Continues the overlay process, this time offsetting tmp2 by 240 pixels vertically, and labels the result as tmp3.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[tmp3][lowerright]\", \" overlay=shortest=1:x=320:y=240 \", \"[v]\", \";: Finally, overlays tmp3 with the lowerright video stream, offsetting it both horizontally and vertically, and labels the result as v.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[0:a][1:a]\", \"amerge\", \"[a1]\", \";, \", \"[a1][2:a]\", \"amerge\", \"[a2]\", \";, \", \"[a2][3:a]\", \"amerge\", \"[a]\", \";: Merges the audio streams of the input videos into a single audio stream.\")), \"This filter graph orchestrates the arrangement and overlaying of the four video streams into a grid pattern, creating a visually appealing collage effect. The audio streams are also appropriately merged for a unified audio output.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Uses \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ffmpegCommand.complexFilter\"), \" to set up the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"filter graph\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sets \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"map\"), \" options for video and audio with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"outputOptions\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Generates the final video file using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ffmpegCommand.output\"), \".\")), mdx(\"h3\", null, \"5. Initiating Video Download and Processing\"), mdx(\"p\", null, \"Invoke the function to download and process the videos.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"downloadAndProcessVideos();\\n\")), mdx(\"h3\", null, \"6. Final Code\"), mdx(\"p\", null, \"Combining all the steps, the final code looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"import ytdl from \\\"ytdl-core\\\";\\nimport Ffmpeg from \\\"fluent-ffmpeg\\\";\\nimport fs from 'fs';\\nimport path from \\\"path\\\";\\n\\nconst input_directory = path.resolve('./input');\\nconst output_directory = path.resolve('./output');\\n\\n// Create directories if they don't exist\\nif (!fs.existsSync(input_directory)) {\\n  fs.mkdirSync(input_directory);\\n}\\nif (!fs.existsSync(output_directory)) {\\n  fs.mkdirSync(output_directory);\\n}\\n\\nconst youtubeVideoURLs = [\\n  'https://www.youtube.com/watch?v=G7KNmW9a75Y',\\n  'https://www.youtube.com/watch?v=6ZUIwj3FgUY',\\n  'https://www.youtube.com/watch?v=ArmDp-zijuc',\\n  'https://www.youtube.com/watch?v=XoiOOiuH8iI',\\n];\\n\\nasync function downloadAndProcessVideos() {\\n  const videoPromises = youtubeVideoURLs.map(async (url, index) => {\\n    const videoInfo = await ytdl.getInfo(url);\\n    const videoStream = await ytdl(url, { filter: 'audioandvideo' })\\n      .pipe(fs.createWriteStream(`${input_directory}/video${index}.mp4`));\\n\\n    return new Promise(resolve => {\\n      videoStream.on('finish', ()=> {\\n        console.warn('finished');\\n        resolve({videoStream, videoInfo});\\n      })\\n    })\\n\\n  });\\n\\n  const videoInfoArray = await Promise.all(videoPromises);\\n\\n  const ffmpegCommand = Ffmpeg();\\n  ffmpegCommand.setFfmpegPath(path.resolve('/ffmpeg/bin/ffmpeg.exe'));\\n  ffmpegCommand.setFfprobePath(path.resolve('/ffmpeg/bin/ffprobe.exe'));\\n  \\n  videoInfoArray.forEach(({ videoStream }, index) => {\\n    ffmpegCommand.input(videoStream.path)\\n  });\\n\\n  // Save the final video file.\\n  const filterGraph = [\\n    `nullsrc=size=640x480 [base];`,\\n    `[0:v] setpts=PTS-STARTPTS, scale=320x240 [upperleft];`,\\n    `[1:v] setpts=PTS-STARTPTS, scale=320x240 [upperright];`,\\n    `[2:v] setpts=PTS-STARTPTS, scale=320x240 [lowerleft];`,\\n    `[3:v] setpts=PTS-STARTPTS, scale=320x240 [lowerright];`,\\n    `[base][upperleft] overlay=shortest=1 [tmp1];`,\\n    `[tmp1][upperright] overlay=shortest=1:x=320[tmp2];`,\\n    `[tmp2][lowerleft] overlay=shortest=1:y=240 [tmp3];`,\\n    `[tmp3][lowerright] overlay=shortest=1:x=320:y=240[v];`,\\n    `[0:a][1:a]amerge[a1];`,\\n    `[a1][2:a]amerge[a2];`,\\n    `[a2][3:a]amerge[a]`,\\n  ].join(' ');\\n\\n  ffmpegCommand\\n    .complexFilter(filterGraph)\\n    .outputOptions('-map', '[v]')\\n    .outputOptions('-map', '[a]')\\n    .output(`${output_directory}/final.mp4`)\\n    .on('end', () => console.log('Processing finished!'))\\n    .on('error', (err, stdout, stderr) => {\\n      console.error('Error:', err)\\n      console.log('ffmpeg stdout:', stdout);\\n      console.log('ffmpeg stderr:', stderr);\\n    })\\n    .run()\\n}\\n\\n// Start video download and processing\\ndownloadAndProcessVideos();\\n\")), mdx(\"h3\", null, \"7. Run it\"), mdx(\"p\", null, \"Now, let's run the command to execute the script:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"node index.js\\n\")), mdx(\"p\", null, \"This command will trigger the Node.js script (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" - whatever you have) and start the process of downloading, processing, and creating the final video collage. Keep an eye on the console for progress updates and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Processing finished!\"), \" message, indicating the successful completion of the task. Enjoy creating your video collage!\"), mdx(\"h3\", null, \"Conclusion\"), mdx(\"p\", null, \"Now, with the provided code, you can download YouTube videos and create unique collage videos. Add your desired YouTube video URLs, execute the script, and enjoy crafting distinctive video collages!\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Introduction Merging videos and presenting them in a collage format is an incredibly fascinating endeavor. In this blog post, we'll explore…","timeToRead":2,"banner":null}},"pageContext":{"slug":"/creating-engaging-you-tube-video-collage"}},"staticQueryHashes":["1386366609","1386366609","1580740877"]}